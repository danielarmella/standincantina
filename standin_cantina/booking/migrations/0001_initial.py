# Generated by Django 5.1.7 on 2025-03-07 03:22

import booking.models
import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AD",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, default="", max_length=127),
                ),
                ("last_name", models.CharField(blank=True, default="", max_length=127)),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=128, null=True, region="US"
                    ),
                ),
            ],
            options={
                "verbose_name": "Assistant Director",
                "verbose_name_plural": "ADs",
                "ordering": ["last_name"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "is_approved",
                    models.BooleanField(default=False, verbose_name="Approved"),
                ),
                (
                    "is_standin",
                    models.BooleanField(default=False, verbose_name="Stand-in"),
                ),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        max_length=128,
                        null=True,
                        region="US",
                        verbose_name="Phone number",
                    ),
                ),
                (
                    "birthday",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                datetime.date(1900, 1, 1), "No birthdays before 1900"
                            ),
                            django.core.validators.MaxValueValidator(
                                datetime.date(2025, 3, 7), "No future birthdays"
                            ),
                        ],
                        verbose_name="Date of birth",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "ordering": ["last_name"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Actor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(default="", max_length=127)),
                ("last_name", models.CharField(blank=True, default="", max_length=127)),
                (
                    "birth_year",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Year of birth"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other/Non-binary"),
                            ("na", "Prefer not to say"),
                        ],
                        default="",
                        max_length=12,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "height_in_inches",
                    models.PositiveSmallIntegerField(
                        help_text="Height in feet and inches",
                        validators=[
                            django.core.validators.MinValueValidator(
                                20, "Height must be at least 20 inches."
                            ),
                            django.core.validators.MaxValueValidator(
                                108, "Height cannot exceed 9'(feet)."
                            ),
                        ],
                        verbose_name="Height(in)",
                    ),
                ),
                (
                    "weight_in_lbs",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Weight in lbs",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                10, "Weight must be at least 10 lbs."
                            ),
                            django.core.validators.MaxValueValidator(
                                800, "Weight cannot exceed 800 lbs."
                            ),
                        ],
                        verbose_name="Weight(lbs)",
                    ),
                ),
                (
                    "skin_tone",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ivory", "Ivory to pale white"),
                            ("white", "White, fair"),
                            ("medium", "Medium white to olive"),
                            ("olive", "Olive to moderate brown"),
                            ("brown", "Brown to dark brown"),
                            ("dark", "Very dark brown to black"),
                        ],
                        default="",
                        max_length=7,
                        verbose_name="Skin tone",
                    ),
                ),
                (
                    "hair_length",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("bald", "Bald"),
                            ("short", "Short"),
                            ("medium", "Medium"),
                            ("long", "Long"),
                        ],
                        default="",
                        max_length=10,
                        verbose_name="Hair length",
                    ),
                ),
                (
                    "headshot",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="actor_headshots/",
                        validators=[booking.models.validate_image],
                        verbose_name="Headshot",
                    ),
                ),
            ],
            options={
                "verbose_name": "Actor",
                "verbose_name_plural": "Actors",
                "ordering": ["last_name"],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("first_name", "last_name"),
                        name="unique_actor_name",
                        violation_error_message="An actor with that name already exists.",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="ActorStandInMatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "actor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standin_matches",
                        to="booking.actor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Actor/Stand-in match",
                "verbose_name_plural": "Actor/Stand-in matches",
            },
        ),
        migrations.CreateModel(
            name="BookingRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="yyyy-mm-dd",
                        validators=[
                            django.core.validators.MinValueValidator(
                                datetime.date(2020, 1, 1), "No ancient start dates"
                            )
                        ],
                    ),
                ),
                ("end_date", models.DateField(help_text="yyyy-mm-dd")),
                ("notes", models.TextField(blank=True, default="")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("rush", "Rush"),
                            ("open", "Open"),
                            ("avail_checks", "Avail checks"),
                            ("booked", "Booked"),
                            ("closed", "Closed"),
                        ],
                        default="open",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "actors",
                    models.ManyToManyField(
                        blank=True, related_name="booking_requests", to="booking.actor"
                    ),
                ),
                (
                    "ad",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="booking_requests",
                        to="booking.ad",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BookingRequestImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        upload_to="booking_requests/",
                        validators=[booking.models.validate_image],
                    ),
                ),
                (
                    "request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="request_images",
                        to="booking.bookingrequest",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="bookingrequest",
            name="images",
            field=models.ManyToManyField(blank=True, to="booking.bookingrequestimage"),
        ),
        migrations.CreateModel(
            name="Incident",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "incident",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("0", "Excused abscence or lateness"),
                            ("1", "Called out"),
                            ("2", "Late"),
                            ("3", "No call/no show"),
                            ("4", "Other. See notes"),
                        ],
                        default="",
                        max_length=1,
                        verbose_name="Incident",
                    ),
                ),
                ("note", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "date",
                    models.DateField(
                        default=datetime.date.today,
                        help_text="What date did the incident occur?",
                        verbose_name="Date incident occurred",
                    ),
                ),
                ("needs_followup", models.BooleanField(blank=True, default=False)),
                (
                    "complainant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="complaints",
                        to="booking.ad",
                    ),
                ),
            ],
            options={
                "verbose_name": "Incident",
                "verbose_name_plural": "Incidents",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="MediaUpload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        upload_to="user_pics/",
                        validators=[booking.models.validate_image],
                    ),
                ),
                ("is_main_image", models.BooleanField(default=False)),
                ("time_stamp", models.DateTimeField(auto_now_add=True)),
                ("approved", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="uploads",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Media upload",
                "verbose_name_plural": "Media uploads",
                "ordering": ["-time_stamp"],
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(default="", max_length=255)),
                (
                    "start_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Project start date"
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Project end date"
                    ),
                ),
                (
                    "ads",
                    models.ManyToManyField(
                        blank=True,
                        related_name="projects",
                        to="booking.ad",
                        verbose_name="Assistant Directors",
                    ),
                ),
            ],
            options={
                "verbose_name": "Project",
                "verbose_name_plural": "Projects",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="DNR",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField(blank=True)),
                (
                    "ad",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="booking.ad",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_DNRs",
                        to="booking.project",
                    ),
                ),
            ],
            options={
                "verbose_name": "DNR",
                "verbose_name_plural": "DNRs",
            },
        ),
        migrations.AddField(
            model_name="bookingrequest",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="booking_requests",
                to="booking.project",
            ),
        ),
        migrations.AddField(
            model_name="ad",
            name="most_recent_project",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="current_ad",
                to="booking.project",
            ),
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("feedback", models.TextField(blank=True)),
                ("is_positive", models.BooleanField(blank=True, null=True)),
                ("date", models.DateField(default=datetime.date.today)),
                (
                    "ad",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviews_given",
                        to="booking.ad",
                    ),
                ),
            ],
            options={
                "verbose_name": "Review",
                "verbose_name_plural": "Reviews",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="StandIn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other/Non-binary"),
                            ("na", "Prefer not to say"),
                        ],
                        default="",
                        max_length=12,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "height_in_inches",
                    models.PositiveSmallIntegerField(
                        help_text="Height in inches",
                        validators=[
                            django.core.validators.MinValueValidator(
                                20, "Height must be at least 20 inches."
                            ),
                            django.core.validators.MaxValueValidator(
                                108, "Height cannot exceed 9'(feet)."
                            ),
                        ],
                        verbose_name="Height(in)",
                    ),
                ),
                (
                    "weight_in_lbs",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Weight in lbs",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                10, "Weight must be at least 10 lbs."
                            ),
                            django.core.validators.MaxValueValidator(
                                800, "Weight cannot exceed 800 lbs."
                            ),
                        ],
                        verbose_name="Weight(lbs)",
                    ),
                ),
                (
                    "skin_tone",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ivory", "Ivory to pale white"),
                            ("white", "White, fair"),
                            ("medium", "Medium white to olive"),
                            ("olive", "Olive to moderate brown"),
                            ("brown", "Brown to dark brown"),
                            ("dark", "Very dark brown to black"),
                        ],
                        default="",
                        max_length=7,
                        verbose_name="Skin tone",
                    ),
                ),
                (
                    "hair_length",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("bald", "Bald"),
                            ("short", "Short"),
                            ("medium", "Medium"),
                            ("long", "Long"),
                        ],
                        default="",
                        max_length=10,
                        verbose_name="Hair length",
                    ),
                ),
                (
                    "age_range_min",
                    models.SmallIntegerField(
                        blank=True,
                        help_text="Enter minimum reasonably portrayable age",
                        null=True,
                    ),
                ),
                (
                    "age_range_max",
                    models.SmallIntegerField(
                        blank=True,
                        help_text="Enter maximum reasonably portrayable age",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional stand-in details",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "DNRs",
                    models.ManyToManyField(
                        related_name="ad_DNRs", through="booking.DNR", to="booking.ad"
                    ),
                ),
                (
                    "incidents",
                    models.ManyToManyField(
                        related_name="incidents",
                        through="booking.Incident",
                        to="booking.ad",
                    ),
                ),
                (
                    "matched_actors",
                    models.ManyToManyField(
                        related_name="matches",
                        through="booking.ActorStandInMatch",
                        to="booking.actor",
                    ),
                ),
                (
                    "recommended_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="recommendees",
                        to="booking.standin",
                    ),
                ),
                (
                    "reviews",
                    models.ManyToManyField(
                        related_name="reviewed_standins",
                        through="booking.Review",
                        to="booking.ad",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standin",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "StandIn",
                "verbose_name_plural": "StandIns",
                "ordering": ["user__last_name"],
            },
        ),
        migrations.AddField(
            model_name="review",
            name="standin",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="booking.standin"
            ),
        ),
        migrations.AddField(
            model_name="incident",
            name="standin",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="booking.standin"
            ),
        ),
        migrations.CreateModel(
            name="HairColor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "hair_color",
                    models.CharField(
                        choices=[
                            ("black", "Black"),
                            ("brown", "Brown"),
                            ("blond", "Blond"),
                            ("white/gray", "White/Gray"),
                            ("red", "Red"),
                        ],
                        default="",
                        max_length=15,
                        verbose_name="Hair color",
                    ),
                ),
                (
                    "standin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hair_colors",
                        to="booking.standin",
                    ),
                ),
            ],
            options={
                "verbose_name": "Hair color",
                "verbose_name_plural": "Hair colors",
            },
        ),
        migrations.AddField(
            model_name="dnr",
            name="standin",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="booking.standin"
            ),
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(help_text="yyyy-mm-dd", verbose_name="Start date"),
                ),
                (
                    "end_date",
                    models.DateField(help_text="yyyy-mm-dd", verbose_name="End date"),
                ),
                (
                    "email_reminder_sent",
                    models.BooleanField(
                        default=False, verbose_name="Email reminder sent"
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_bookings",
                        to="booking.project",
                    ),
                ),
                (
                    "standin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standin_bookings",
                        to="booking.standin",
                    ),
                ),
            ],
            options={
                "verbose_name": "Booking",
                "verbose_name_plural": "Bookings",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="AvailCheck",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="yyyy-mm-dd",
                        validators=[
                            django.core.validators.MinValueValidator(
                                datetime.date(2020, 1, 1), "No ancient start dates"
                            )
                        ],
                    ),
                ),
                ("end_date", models.DateField(help_text="yyyy-mm-dd")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avails_requested",
                        to="booking.project",
                    ),
                ),
                (
                    "standins",
                    models.ManyToManyField(
                        blank=True, related_name="avail_checks", to="booking.standin"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Availability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="yyyy-mm-dd",
                        validators=[
                            django.core.validators.MinValueValidator(
                                datetime.date(2020, 1, 1), "No ancient start dates"
                            )
                        ],
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        help_text="yyyy-mm-dd",
                        validators=[booking.models.validate_avail_date],
                    ),
                ),
                ("is_available", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "booked",
                    models.ForeignKey(
                        blank=True,
                        help_text="Must be a booking not a project.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="avail",
                        to="booking.booking",
                    ),
                ),
                (
                    "standin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avails",
                        to="booking.standin",
                    ),
                ),
            ],
            options={
                "verbose_name": "Availability",
                "verbose_name_plural": "Availabilities",
                "db_table": "booking_availability",
                "ordering": ["-start_date"],
            },
        ),
        migrations.AddField(
            model_name="actorstandinmatch",
            name="standin",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="actor_matches",
                to="booking.standin",
            ),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(
                fields=("first_name", "last_name"),
                name="unique_name",
                violation_error_message="A user with that name already exists.",
            ),
        ),
        migrations.AddIndex(
            model_name="standin",
            index=models.Index(
                fields=["height_in_inches", "skin_tone"],
                name="booking_sta_height__204163_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="haircolor",
            constraint=models.UniqueConstraint(
                fields=("standin", "hair_color"),
                name="unique_hair_color",
                violation_error_message="This stand-in already has that hair color listed.",
            ),
        ),
        migrations.AddConstraint(
            model_name="dnr",
            constraint=models.UniqueConstraint(
                fields=("standin", "ad"),
                name="unique_ad_DNR",
                violation_error_message="This stand-in has already been DNRed by this AD.",
            ),
        ),
        migrations.AddConstraint(
            model_name="dnr",
            constraint=models.UniqueConstraint(
                fields=("standin", "project"),
                name="unique_project_DNR",
                violation_error_message="This stand-in has already been DNRed on this project.",
            ),
        ),
        migrations.AddConstraint(
            model_name="actorstandinmatch",
            constraint=models.UniqueConstraint(
                fields=("actor", "standin"),
                name="unique_actor_standin_match",
                violation_error_message="This stand-in has already been matched to this actor.",
            ),
        ),
    ]
